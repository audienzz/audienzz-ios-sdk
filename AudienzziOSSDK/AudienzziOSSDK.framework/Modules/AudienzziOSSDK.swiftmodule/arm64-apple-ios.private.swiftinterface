// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AudienzziOSSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AdSupport
import AppTrackingTransparency
@_exported import AudienzziOSSDK
import Foundation
import GoogleMobileAds
import Network
import ObjectiveC
import PrebidMobile
import PrebidMobileGAMEventHandlers
import SQLite
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class AUNativeTitle : ObjectiveC.NSObject {
  @objc public var text: Swift.String?
  public var length: Swift.Int?
  @objc public var ext: [Swift.String : Any]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AudienzzGAMUtils : ObjectiveC.NSObject {
  @objc public static let shared: AudienzziOSSDK.AudienzzGAMUtils
  @objc public static var errorDomain: Swift.String {
    @objc get
  }
  @objc public func initializeGAM()
  @objc public func prepareRequest(_ request: GoogleMobileAds.AdManagerRequest, bidTargeting: [Swift.String : Swift.String])
  @objc override dynamic public init()
  @objc deinit
}
extension AudienzziOSSDK.AudienzzGAMUtils {
  public func findNativeAd(for nativeAd: GoogleMobileAds.NativeAd) -> Swift.Result<PrebidMobile.NativeAd, PrebidMobileGAMEventHandlers.GAMEventHandlerError>
  @objc dynamic public func findNativeAdObjc(for nativeAd: GoogleMobileAds.NativeAd, completion: @escaping (PrebidMobile.NativeAd?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func findCustomNativeAd(for nativeAd: GoogleMobileAds.CustomNativeAd, completion: @escaping (AudienzziOSSDK.AUNativeAd?, Foundation.NSError?) -> Swift.Void)
  @objc dynamic public func findCustomNativeAdObjc(for nativeAd: GoogleMobileAds.CustomNativeAd, completion: @escaping (PrebidMobile.NativeAd?, Foundation.NSError?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeEventTrackerResponse : ObjectiveC.NSObject {
  public var event: Swift.Int?
  public var method: Swift.Int?
  @objc public var url: Swift.String?
  @objc public var customdata: [Swift.String : Any]?
  @objc public var ext: [Swift.String : Any]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeData : ObjectiveC.NSObject {
  public var type: Swift.Int?
  public var length: Swift.Int?
  @objc public var value: Swift.String?
  @objc public var ext: [Swift.String : Any]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AURewardedView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency public var videoParameters: AudienzziOSSDK.AUVideoParameters?
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override public init(configId: Swift.String, isLazyLoad: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func setImpOrtbConfig(ortbConfig: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func getImpOrtbConfig() -> Swift.String?
  @objc @_Concurrency.MainActor @preconcurrency public func createAd(with gamRequest: GoogleMobileAds.AdManagerRequest, adUnitID: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func connectHandler(_ eventHandler: AudienzziOSSDK.AURewardedEventHandler)
}
@objc @objcMembers public class AUAdFormat : ObjectiveC.NSObject, Swift.OptionSet {
  public typealias RawValue = Swift.Int
  @objc final public let rawValue: Swift.Int
  @objc public var stringEquivalent: Swift.String? {
    get
  }
  @objc convenience public init(rawValue: AudienzziOSSDK.AUAdFormat.RawValue, stringEquivalent: Swift.String)
  @objc required public init(rawValue: AudienzziOSSDK.AUAdFormat.RawValue)
  @objc public static let banner: AudienzziOSSDK.AUAdFormat
  @objc public static let video: AudienzziOSSDK.AUAdFormat
  @objc public static let native: AudienzziOSSDK.AUAdFormat
  @objc public static var allCases: [AudienzziOSSDK.AUAdFormat] {
    @objc get
  }
  public typealias ArrayLiteralElement = AudienzziOSSDK.AUAdFormat
  public typealias Element = AudienzziOSSDK.AUAdFormat
  @objc deinit
}
@objc public enum AUImageAsset : Swift.Int {
  case Icon = 1
  case Main = 3
  case Custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AUDataAsset : Swift.Int {
  case sponsored = 1
  case description = 2
  case rating = 3
  case likes = 4
  case downloads = 5
  case price = 6
  case saleprice = 7
  case phone = 8
  case address = 9
  case description2 = 10
  case displayurl = 11
  case ctatext = 12
  case Custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AUContextSubType : Swift.Int {
  case General = 10
  case Article = 11
  case Video = 12
  case Audio = 13
  case Image = 14
  case UserGenerated = 15
  case Social = 20
  case email = 21
  case chatIM = 22
  case SellingProduct = 30
  case AppStore = 31
  case ReviewSite = 32
  case Custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct AUNativeRequestParameter {
  public var context: AudienzziOSSDK.AUContextType?
  public var contextSubType: AudienzziOSSDK.AUContextSubType?
  public var placementType: AudienzziOSSDK.AUPlacementType?
  public var placementCount: Swift.Int?
  public var sequence: Swift.Int?
  public var assets: [AudienzziOSSDK.AUNativeAsset]?
  public var asseturlsupport: Swift.Int?
  public var durlsupport: Swift.Int?
  public var eventtrackers: [AudienzziOSSDK.AUNativeEventTracker]?
  public var privacy: Swift.Int?
  public var ext: [Swift.String : Any]?
  public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class VisibleView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUNativeBannerView : AudienzziOSSDK.AUAdView {
  @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, configuration: AudienzziOSSDK.AUNativeRequestParameter)
  @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, configuration: AudienzziOSSDK.AUNativeRequestParameter, isLazyLoad: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func createAd(with gamRequest: GoogleMobileAds.AdManagerRequest, gamBanner: UIKit.UIView, configuration: AudienzziOSSDK.AUNativeRequestParameter)
  @objc deinit
}
@objc @objcMembers public class AUInterstitialEventHandler : ObjectiveC.NSObject {
  @objc public init(adUnit: GoogleMobileAds.InterstitialAd)
  @objc deinit
}
@objc public protocol AUBannerRenderingAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func bannerAdDidDisplayOnScreen()
  @objc func bannerViewPresentationController() -> UIKit.UIViewController?
  @objc optional func bannerView(_ bannerView: AudienzziOSSDK.AUBannerRenderingView, didReceiveAdWithAdSize adSize: CoreFoundation.CGSize)
  @objc optional func bannerView(_ bannerView: AudienzziOSSDK.AUBannerRenderingView, didFailToReceiveAdWith error: any Swift.Error)
  @objc optional func bannerViewWillLeaveApplication(_ bannerView: AudienzziOSSDK.AUBannerRenderingView)
  @objc optional func bannerViewWillPresentModal(_ bannerView: AudienzziOSSDK.AUBannerRenderingView)
  @objc optional func bannerViewDidDismissModal(_ bannerView: AudienzziOSSDK.AUBannerRenderingView)
}
@objc @objcMembers public class AUVideoParameters : ObjectiveC.NSObject {
  @objc public var api: [AudienzziOSSDK.AUApi]?
  public var maxBitrate: Swift.Int?
  public var minBitrate: Swift.Int?
  public var maxDuration: Swift.Int?
  public var minDuration: Swift.Int?
  @objc public var mimes: [Swift.String]
  @objc public var playbackMethod: [AudienzziOSSDK.AUVideoPlaybackMethod]?
  @objc public var protocols: [AudienzziOSSDK.AUVideoProtocols]?
  public var startDelay: AudienzziOSSDK.AUVideoStartDelay?
  public var placement: AudienzziOSSDK.AUPlacement?
  public var linearity: Swift.Int?
  public var adSize: CoreFoundation.CGSize?
  @objc public init(mimes: [Swift.String])
  @objc public func setSize(_ size: Foundation.NSValue)
  @objc public func setLinearity(_ linearity: Foundation.NSNumber)
  @objc public func setMaxBitrate(_ value: Foundation.NSNumber)
  @objc public func setMinBitrate(_ value: Foundation.NSNumber)
  @objc public func setMaxDuration(_ value: Foundation.NSNumber)
  @objc public func setMinDuration(_ value: Foundation.NSNumber)
  @objc public func setStartDelay(_ value: AudienzziOSSDK.AUVideoStartDelay)
  @objc public func setPlacement(_ value: AudienzziOSSDK.AUPlacement)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUMORTBContentData : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String?
  @objc public var segment: [AudienzziOSSDK.AUMORTBContentSegment]?
  @objc public var ext: [Swift.String : ObjectiveC.NSObject]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUMORTBContentSegment : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String?
  @objc public var value: Swift.String?
  @objc public var ext: [Swift.String : ObjectiveC.NSObject]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUMORTBContentProducer : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var name: Swift.String?
  @objc public var cat: [Swift.String]?
  @objc public var domain: Swift.String?
  @objc public var ext: [Swift.String : ObjectiveC.NSObject]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeLink : ObjectiveC.NSObject {
  @objc public var url: Swift.String?
  @objc public var clicktrackers: [Swift.String]?
  @objc public var fallback: Swift.String?
  @objc public var ext: [Swift.String : Any]?
  @objc deinit
}
@objc @objcMembers public class AUGAMBannerEventHandler : ObjectiveC.NSObject {
  @objc public init(adUnitID: Swift.String, validGADAdSizes: [Foundation.NSValue])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUBannerRenderingView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AudienzziOSSDK.AUBannerRenderingAdDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var configID: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var bannerParameters: AudienzziOSSDK.AUBannerParameters {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var videoParameters: AudienzziOSSDK.AUVideoParameters {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var refreshInterval: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var additionalSizes: [CoreFoundation.CGSize]? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var adFormat: AudienzziOSSDK.AUAdFormat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var adPosition: AudienzziOSSDK.AUAdPosition {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setVideoParameters(_ videoParameters: AudienzziOSSDK.AUVideoParameters)
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adSize: CoreFoundation.CGSize, format: AudienzziOSSDK.AUAdFormat = .banner, isLazyLoad: Swift.Bool = true, eventHandler: AudienzziOSSDK.AUGAMBannerEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency public func createAd()
  @objc deinit
}
public typealias PrebidNativeAd = PrebidMobile.NativeAd
@objc public enum AUNativeType : Swift.Int {
  case origin
  case rendering
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AUNativeAdDelegate {
  @objc func nativeAdNotFound()
  @objc func nativeAdNotValid()
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUNativeView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency public var onNativeLoadRequest: ((Swift.AnyObject, [Swift.String : Swift.String]) -> Swift.Void)?
  @objc @_Concurrency.MainActor @preconcurrency public var onGetNativeAd: ((AudienzziOSSDK.AUNativeAd) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var nativeParameter: AudienzziOSSDK.AUNativeRequestParameter!
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AudienzziOSSDK.AUNativeAdDelegate)?
  @_Concurrency.MainActor @preconcurrency public var adType: AudienzziOSSDK.AUNativeType!
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adType: AudienzziOSSDK.AUNativeType = .origin)
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, isLazyLoad: Swift.Bool, adType: AudienzziOSSDK.AUNativeType = .origin)
  @objc @_Concurrency.MainActor @preconcurrency public func createAd(with gamRequest: GoogleMobileAds.AdManagerRequest)
  @objc @_Concurrency.MainActor @preconcurrency public func findNative(adObject: Swift.AnyObject)
  @objc @discardableResult
  @_Concurrency.MainActor @preconcurrency public func registerView(clickableViews: [UIKit.UIView]?) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func findRenderingAd(_ ad: AudienzziOSSDK.AUNativeAd?)
  @objc deinit
}
@objc public protocol AUInterstitialenderingAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func interstitialAdDidDisplayOnScreen()
  @objc optional func interstitialDidReceiveAd()
  @objc optional func interstitialDidFailToReceiveAdWithError(error: (any Swift.Error)?)
  @objc optional func interstitialWillPresentAd()
  @objc optional func interstitialDidDismissAd()
  @objc optional func interstitialWillLeaveApplication()
  @objc optional func interstitialDidClickAd()
}
@objc(AUApiType) public enum AUApiType : Swift.Int {
  case VPAID_1 = 1
  case VPAID_2 = 2
  case MRAID_1 = 3
  case ORMMA = 4
  case MRAID_2 = 5
  case MRAID_3 = 6
  case OMID_1 = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(AUApi) public class AUApi : ObjectiveC.NSObject {
  @objc public init(apiType: AudienzziOSSDK.AUApiType)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeAdMarkup : ObjectiveC.NSObject {
  @objc public var version: Swift.String?
  @objc public var assets: [AudienzziOSSDK.AUNativeAdMarkupAsset]?
  @objc public var assetsurl: Swift.String?
  @objc public var dcourl: Swift.String?
  @objc public var link: AudienzziOSSDK.AUNativeLink?
  @objc public var imptrackers: [Swift.String]?
  @objc public var jstracker: Swift.String?
  @objc public var eventtrackers: [AudienzziOSSDK.AUNativeEventTrackerResponse]?
  @objc public var privacy: Swift.String?
  @objc public var ext: [Swift.String : Any]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Audienzz : ObjectiveC.NSObject {
  @objc public var timeoutUpdated: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var audienzServerAccountId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var pbsDebug: Swift.Bool
  @objc public var customHeaders: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public var storedBidResponses: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public static let shared: AudienzziOSSDK.Audienzz
  @objc public func configureSDK(companyId: Swift.String)
  @objc public func configureSDK(companyId: Swift.String, gadMobileAdsVersion: Swift.String? = nil)
  @objc public func configureSDK_RN(companyId: Swift.String, _ completion: (() -> Swift.Void)? = nil)
  @objc public func configureSDK_RN(companyId: Swift.String, gadMobileAdsVersion: Swift.String?, _ completion: (() -> Swift.Void)? = nil)
  @objc public var timeoutMillis: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var timeoutMillisDynamic: Foundation.NSNumber?
  @objc public var storedAuctionResponse: Swift.String?
  @objc public func addStoredBidResponse(bidder: Swift.String, responseId: Swift.String)
  @objc public func clearStoredBidResponses()
  @objc public func getStoredBidResponses() -> [[Swift.String : Swift.String]]?
  @objc public func addCustomHeader(name: Swift.String, value: Swift.String)
  @objc public func clearCustomHeaders()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUMultiplatformView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AudienzziOSSDK.AUNativeAdDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var onGetNativeAd: ((AudienzziOSSDK.PrebidNativeAd) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, isLazyLoad: Swift.Bool = true, bannerParameters: AudienzziOSSDK.AUBannerParameters? = nil, videoParameters: AudienzziOSSDK.AUVideoParameters? = nil, nativeParameters: AudienzziOSSDK.AUNativeRequestParameter? = nil, isInterstitial: Swift.Bool = false, isRewarded: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency public func create(with gamRequest: GoogleMobileAds.AdManagerRequest, adUnitID: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func findNative(adObject: Swift.AnyObject)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class AUAdUnitConfiguration : AudienzziOSSDK.AUAdUnitConfigurationType {
  @objc deinit
}
extension AudienzziOSSDK.AUAdUnitConfiguration : AudienzziOSSDK.AUAdUnitConfigurationSlotProtocol {
  @objc dynamic public var adSlot: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public func get_AdSlot() -> Swift.String?
  @objc dynamic public func set_AdSlot(newValue: Swift.String?)
}
extension AudienzziOSSDK.AUAdUnitConfiguration : AudienzziOSSDK.AUAdUnitConfigurationAutorefreshProtocol {
  @objc dynamic public func setAutoRefreshMillis(time: Swift.Double)
  @objc dynamic public func stopAutoRefresh()
  @objc dynamic public func resumeAutoRefresh()
}
extension AudienzziOSSDK.AUAdUnitConfiguration : AudienzziOSSDK.AUAdUnitConfigurationGRIPProtocol {
  @objc dynamic public func setGPID(_ gpid: Swift.String?)
  @objc dynamic public func getGPID() -> Swift.String?
}
@objc public enum AUResultCode : Swift.Int {
  case audienzzDemandFetchSuccess = 0
  case audienzzServerNotSpecified
  case audienzzInvalidAccountId
  case audienzzInvalidConfigId
  case audienzzInvalidSize
  case audienzzNetworkError
  case audienzzServerError
  case audienzzDemandNoBids
  case audienzzDemandTimedOut
  case audienzzServerURLInvalid
  case audienzzUnknownError
  case audienzzInvalidResponseStructure = 1000
  case audienzzInternalSDKError = 7000
  case audienzzWrongArguments
  case audienzzNoVastTagInMediaData
  case audienzzSDKMisuse = 8000
  case audienzzSDKMisusePreviousFetchNotCompletedYet
  case audienzzInvalidRequest
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUBannerParameters : ObjectiveC.NSObject {
  @objc public var api: [AudienzziOSSDK.AUApi]?
  public var interstitialMinWidthPerc: Swift.Int?
  public var interstitialMinHeightPerc: Swift.Int?
  @objc public var adSizes: [CoreFoundation.CGSize]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUMORTBAppContent : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var episode: Foundation.NSNumber?
  @objc public var title: Swift.String?
  @objc public var series: Swift.String?
  @objc public var season: Swift.String?
  @objc public var artist: Swift.String?
  @objc public var genre: Swift.String?
  @objc public var album: Swift.String?
  @objc public var isrc: Swift.String?
  @objc public var producer: AudienzziOSSDK.AUMORTBContentProducer?
  @objc public var url: Swift.String?
  @objc public var cat: [Swift.String]?
  @objc public var prodq: Foundation.NSNumber?
  @objc public var context: Foundation.NSNumber?
  @objc public var contentrating: Swift.String?
  @objc public var userrating: Swift.String?
  @objc public var qagmediarating: Foundation.NSNumber?
  @objc public var keywords: Swift.String?
  @objc public var livestream: Foundation.NSNumber?
  @objc public var sourcerelationship: Foundation.NSNumber?
  @objc public var len: Foundation.NSNumber?
  @objc public var language: Swift.String?
  @objc public var embeddable: Foundation.NSNumber?
  @objc public var data: [AudienzziOSSDK.AUMORTBContentData]?
  @objc public var ext: [Swift.String : ObjectiveC.NSObject]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class AUNativeEventTracker : ObjectiveC.NSObject {
  @objc public init(event: AudienzziOSSDK.AUEventType, methods: [AudienzziOSSDK.AUEventTracking])
  @objc deinit
}
@objc public enum AUEventType : Swift.Int {
  case Impression = 1
  case ViewableImpression50 = 2
  case ViewableImpression100 = 3
  case ViewableVideoImpression50 = 4
  case Custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AUEventTracking : ObjectiveC.NSObject {
  @objc public init(trackingType: AudienzziOSSDK.AUEventTrackingType)
  @objc deinit
}
@objc public enum AUEventTrackingType : Swift.Int {
  case Image = 1
  case js = 2
  case Custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeAd : ObjectiveC.NSObject {
  @objc public var nativeAdMarkup: AudienzziOSSDK.AUNativeAdMarkup? {
    @objc get
  }
  @objc weak public var delegate: (any AudienzziOSSDK.AUNativeAdEventDelegate)?
  @objc public var titles: [AudienzziOSSDK.AUNativeTitle] {
    @objc get
  }
  @objc public var dataObjects: [AudienzziOSSDK.AUNativeData] {
    @objc get
  }
  @objc public var images: [AudienzziOSSDK.AUNativeImage] {
    @objc get
  }
  @objc public var eventTrackers: [AudienzziOSSDK.AUNativeEventTrackerResponse]? {
    @objc get
  }
  @objc public func dataObjects(of dataType: AudienzziOSSDK.AUNativeDataAssetType) -> [AudienzziOSSDK.AUNativeData]
  @objc public func images(of imageType: AudienzziOSSDK.AUNativeImageAssetType) -> [AudienzziOSSDK.AUNativeImage]
  @objc public var title: Swift.String? {
    @objc get
  }
  @objc public var imageUrl: Swift.String? {
    @objc get
  }
  @objc public var iconUrl: Swift.String? {
    @objc get
  }
  @objc public var sponsoredBy: Swift.String? {
    @objc get
  }
  @objc public var text: Swift.String? {
    @objc get
  }
  @objc public var callToAction: Swift.String? {
    @objc get
  }
  @objc @discardableResult
  public func registerView(view: UIKit.UIView?, clickableViews: [UIKit.UIView]?) -> Swift.Bool
  @objc deinit
}
@objc public protocol AUAdUnitConfigurationType : AudienzziOSSDK.AUAdUnitConfigurationAutorefreshProtocol, AudienzziOSSDK.AUAdUnitConfigurationGRIPProtocol, AudienzziOSSDK.AUAdUnitConfigurationSlotProtocol {
}
@objc public protocol AUAdUnitConfigurationSlotProtocol {
  @objc var adSlot: Swift.String? { get set }
}
@objc public protocol AUAdUnitConfigurationAutorefreshProtocol {
  @objc func setAutoRefreshMillis(time: Swift.Double)
  @objc func stopAutoRefresh()
  @objc func resumeAutoRefresh()
}
@objc public protocol AUAdUnitConfigurationGRIPProtocol {
  @objc func setGPID(_ gpid: Swift.String?)
  @objc func getGPID() -> Swift.String?
}
@objc public enum AUVideoProtocolsType : Swift.Int {
  case VAST_1_0 = 1
  case VAST_2_0 = 2
  case VAST_3_0 = 3
  case VAST_1_0_Wrapped = 4
  case VAST_2_0_Wrapped = 5
  case VAST_3_0_Wrapped = 6
  case VAST_4_0 = 7
  case VAST_4_0_Wrapped = 8
  case DAAST_1_0 = 9
  case DAAST_1_0_Wrapped = 10
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class AUVideoProtocols : ObjectiveC.NSObject {
  @objc public init(type: AudienzziOSSDK.AUVideoProtocolsType)
  @objc deinit
}
@objc public enum AUVideoPlaybackMethodType : Swift.Int {
  case AutoPlaySoundOn = 1
  case AutoPlaySoundOff = 2
  case ClickToPlay = 3
  case MouseOver = 4
  case EnterSoundOn = 5
  case EnterSoundOff = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class AUVideoPlaybackMethod : ObjectiveC.NSObject {
  @objc public init(type: AudienzziOSSDK.AUVideoPlaybackMethodType)
  @objc deinit
}
@objc(AUVideoStartDelay) public enum AUVideoStartDelay : Swift.Int {
  case PreRoll = 0
  case GenericMidRoll = -1
  case GenericPostRoll = -2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(AUPlacement) public enum AUPlacement : Swift.Int {
  case InStream
  case InBanner
  case InArticle
  case InFeed
  case Interstitial
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUAdView : AudienzziOSSDK.VisibleView {
  @objc @_Concurrency.MainActor @preconcurrency public var adUnitConfiguration: (any AudienzziOSSDK.AUAdUnitConfigurationType)!
  @objc @_Concurrency.MainActor @preconcurrency public var onLoadRequest: ((Swift.AnyObject) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adSize: CoreFoundation.CGSize, isLazyLoad: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, isLazyLoad: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adSize: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor @preconcurrency public func setupConfigId(_ configId: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func collapseBehaviour(forView: UIKit.UIView)
  @objc deinit
}
@objc @objcMembers public class AUGAMRewardedAdEventHandler : ObjectiveC.NSObject {
  @objc public init(adUnitID: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AURewardedRenderingView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AudienzziOSSDK.AURewardedAdUnitDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency required public init(configId: Swift.String, isLazyLoad: Swift.Bool = true, minSizePercentage: Foundation.NSValue? = nil, eventHandler: AudienzziOSSDK.AUGAMRewardedAdEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency public func createAd()
  @objc @_Concurrency.MainActor @preconcurrency public func showAd(_ controller: UIKit.UIViewController)
  @objc deinit
}
public typealias Keywords = [Swift.String : Swift.String]
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUInstreamView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency public var videoParameters: AudienzziOSSDK.AUVideoParameters?
  @objc @_Concurrency.MainActor @preconcurrency public var onLoadInstreamRequest: (([Swift.String : Swift.String]?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override public init(configId: Swift.String, adSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor @preconcurrency @objc override public init(configId: Swift.String, adSize: CoreFoundation.CGSize, isLazyLoad: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setImpOrtbConfig(ortbConfig: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func getImpOrtbConfig() -> Swift.String?
  @objc @_Concurrency.MainActor @preconcurrency public func createAd(size: CoreFoundation.CGSize)
  @objc deinit
}
@objc public enum AUContextType : Swift.Int {
  case Content = 1
  case Social = 2
  case Product = 3
  case Custom = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeImage : ObjectiveC.NSObject {
  public var type: Swift.Int?
  @objc public var url: Swift.String?
  public var width: Swift.Int?
  public var height: Swift.Int?
  @objc public var ext: [Swift.String : Any]?
  @objc deinit
}
@objc public enum AUPlacementType : Swift.Int {
  case FeedContent = 1
  case AtomicContent = 2
  case OutsideContent = 3
  case RecommendationWidget = 4
  case Custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class AUAdViewUtils : ObjectiveC.NSObject {
  @objc public static func findCreativeSize(_ adView: UIKit.UIView, success: @escaping (CoreFoundation.CGSize) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class AUIMAUtils : ObjectiveC.NSObject {
  @objc public static let shared: AudienzziOSSDK.AUIMAUtils
  @objc final public func generateInstreamUriForGAM(adUnitID: Swift.String, adSlotSizes: [PrebidMobile.IMAAdSlotSize], customKeywords: [Swift.String : Swift.String]?) throws -> Swift.String
  @objc deinit
}
@objc public protocol AURewardedAdUnitDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func rewardedAdDidDisplayOnScreen()
  @objc optional func rewardedAdDidReceiveAd()
  @objc optional func rewardedAdUserDidEarnReward(_ reward: ObjectiveC.NSObject?)
  @objc optional func rewardedAdDidFailToReceiveAdWithError(_ error: (any Swift.Error)?)
  @objc optional func rewardedAdWillPresentAd()
  @objc optional func rewardedAdDidDismissAd()
  @objc optional func rewardedAdWillLeaveApplication()
  @objc optional func rewardedAdDidClickAd()
}
@objc public protocol AUNativeAdEventDelegate {
  @objc optional func adDidExpire(ad: AudienzziOSSDK.AUNativeAd)
  @objc optional func adWasClicked(ad: AudienzziOSSDK.AUNativeAd)
  @objc optional func adDidLogImpression(ad: AudienzziOSSDK.AUNativeAd)
}
@objc public enum AUNativeDataAssetType : Swift.Int {
  case undefined = 0
  case sponsored = 1
  case desc = 2
  case rating = 3
  case likes = 4
  case downloads = 5
  case price = 6
  case salePrice = 7
  case phone = 8
  case address = 9
  case desc2 = 10
  case displayURL = 11
  case ctaText = 12
  case custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUBannerView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency public var videoParameters: AudienzziOSSDK.AUVideoParameters?
  @objc @_Concurrency.MainActor @preconcurrency public var bannerParameters: AudienzziOSSDK.AUBannerParameters?
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adSize: CoreFoundation.CGSize, adFormats: [AudienzziOSSDK.AUAdFormat])
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adSize: CoreFoundation.CGSize, adFormats: [AudienzziOSSDK.AUAdFormat], isLazyLoad: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc @_Concurrency.MainActor @preconcurrency public func addAdditionalSize(sizes: [CoreFoundation.CGSize])
  @objc @_Concurrency.MainActor @preconcurrency public func setImpOrtbConfig(ortbConfig: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func getImpOrtbConfig() -> Swift.String?
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func createAd(with gamRequest: GoogleMobileAds.AdManagerRequest, gamBanner: UIKit.UIView, eventHandler: AudienzziOSSDK.AUBannerEventHandler? = nil)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AUNativeAdMarkupAsset : ObjectiveC.NSObject {
  public var id: Swift.Int?
  public var required: Swift.Int?
  @objc public var title: AudienzziOSSDK.AUNativeTitle?
  @objc public var img: AudienzziOSSDK.AUNativeImage?
  @objc public var data: AudienzziOSSDK.AUNativeData?
  @objc public var link: AudienzziOSSDK.AUNativeLink?
  @objc public var ext: [Swift.String : Any]?
  @objc deinit
}
@objc @objcMembers public class AURewardedEventHandler : ObjectiveC.NSObject {
  @objc public init(adUnit: GoogleMobileAds.RewardedAd)
  @objc deinit
}
@objc @objcMembers public class AUBannerEventHandler : ObjectiveC.NSObject {
  @objc public init(adUnitId: Swift.String, gamView: GoogleMobileAds.AdManagerBannerView)
  @objc deinit
}
@objc @objcMembers public class AUNativeAsset : ObjectiveC.NSObject {
  @objc public var required: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public init(isRequired: Swift.Bool)
  @objc deinit
}
@objc @objcMembers public class AUNativeAssetTitle : AudienzziOSSDK.AUNativeAsset {
  @objc public var ext: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @objc required public init(length: ObjectiveC.NSInteger, required: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUNativeAssetImage : AudienzziOSSDK.AUNativeAsset {
  public var type: AudienzziOSSDK.AUImageAsset? {
    get
    set
  }
  public var width: Swift.Int? {
    get
    set
  }
  public var widthMin: Swift.Int? {
    get
    set
  }
  public var height: Swift.Int? {
    get
    set
  }
  public var heightMin: Swift.Int? {
    get
    set
  }
  @objc public var mimes: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc public var ext: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @objc convenience public init(minimumWidth: Swift.Int, minimumHeight: Swift.Int, required: Swift.Bool)
  @objc override public init(isRequired: Swift.Bool)
  @objc deinit
}
@objc @objcMembers public class AUNativeAssetData : AudienzziOSSDK.AUNativeAsset {
  public var length: Swift.Int? {
    get
    set
  }
  @objc public var ext: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @objc required public init(type: AudienzziOSSDK.AUDataAsset, required: Swift.Bool)
  @objc deinit
}
@objc @objcMembers public class AUGAMInterstitialEventHandler : ObjectiveC.NSObject {
  @objc public init(adUnitID: Swift.String)
  @objc deinit
}
@objc public enum AURenderingInsterstitialAdFormat : Swift.Int {
  case banner
  case video
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUInterstitialRenderingView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any AudienzziOSSDK.AUInterstitialenderingAdDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var skipButtonArea: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var skipButtonPosition: AudienzziOSSDK.AUAdInterstitialPosition {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var skipDelay: Swift.Double {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency required public init(configId: Swift.String, isLazyLoad: Swift.Bool = true, adFormat: AudienzziOSSDK.AURenderingInsterstitialAdFormat, minSizePercentage: Foundation.NSValue? = nil, eventHandler: AudienzziOSSDK.AUGAMInterstitialEventHandler)
  @objc @_Concurrency.MainActor @preconcurrency public func createAd()
  @objc @_Concurrency.MainActor @preconcurrency public func showAd(_ controller: UIKit.UIViewController)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class AUInterstitialView : AudienzziOSSDK.AUAdView {
  @objc @_Concurrency.MainActor @preconcurrency public var videoParameters: AudienzziOSSDK.AUVideoParameters?
  @objc @_Concurrency.MainActor @preconcurrency public var bannerParameters: AudienzziOSSDK.AUBannerParameters?
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adFormats: [AudienzziOSSDK.AUAdFormat])
  @objc @_Concurrency.MainActor @preconcurrency public init(configId: Swift.String, adFormats: [AudienzziOSSDK.AUAdFormat], isLazyLoad: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(configId: Swift.String, adFormats: [AudienzziOSSDK.AUAdFormat], isLazyLoad: Swift.Bool, minWidthPerc: Swift.Int, minHeightPerc: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func setImpOrtbConfig(ortbConfig: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func getImpOrtbConfig() -> Swift.String?
  @objc @_Concurrency.MainActor @preconcurrency public func createAd(with gamRequest: GoogleMobileAds.AdManagerRequest, adUnitID: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func connectHandler(_ eventHandler: AudienzziOSSDK.AUInterstitialEventHandler)
}
@objc(AUAdPosition) public enum AUAdPosition : Swift.Int {
  case undefined = 0
  case header = 4
  case footer = 5
  case sidebar = 6
  case fullScreen = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(AUAdInterstitialPosition) public enum AUAdInterstitialPosition : Swift.Int {
  case undefined = -1
  case topLeft
  case topCenter
  case topRight
  case center
  case bottomLeft
  case bottomCenter
  case bottomRight
  case custom
  public static func getPositionByStringLiteral(_ stringValue: Swift.String) -> PrebidMobile.Position?
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AUTargeting : ObjectiveC.NSObject {
  @objc public static var shared: AudienzziOSSDK.AUTargeting
  @objc public var omidPartnerName: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var omidPartnerVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var eids: [[Swift.String : Any]]? {
    @objc get
    @objc set
  }
  @objc public var userExt: [Swift.String : Swift.AnyHashable]? {
    @objc get
    @objc set
  }
  @objc public var coppa: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  public var subjectToCOPPA: Swift.Bool? {
    get
    set
  }
  public var subjectToGDPR: Swift.Bool? {
    get
    set
  }
  @objc public func setSubjectToGDPR(_ newValue: Foundation.NSNumber?)
  @objc public func getSubjectToGDPR() -> Foundation.NSNumber?
  @objc public var gdprConsentString: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var purposeConsents: Swift.String? {
    @objc get
    @objc set
  }
  public func getDeviceAccessConsent() -> Swift.Bool?
  @objc public func getDeviceAccessConsentObjc() -> Foundation.NSNumber?
  public func getPurposeConsent(index: Swift.Int) -> Swift.Bool?
  @objc public func isAllowedAccessDeviceData() -> Swift.Bool
  @objc public func getExternalUserIds() -> [[Swift.AnyHashable : Any]]?
  @objc public var contentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var publisherName: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var sourceapp: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var storeURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var domain: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var itunesID: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var location: CoreLocation.CLLocation? {
    @objc get
    @objc set
  }
  @objc public var coordinate: Foundation.NSValue? {
    @objc get
    @objc set
  }
  @objc public func addParam(_ value: Swift.String, withName: Swift.String?)
  @objc public func setLatitude(_ latitude: Swift.Double, longitude: Swift.Double)
  @objc public func addBidderToAccessControlList(_ bidderName: Swift.String)
  @objc public func removeBidderFromAccessControlList(_ bidderName: Swift.String)
  @objc public func clearAccessControlList()
  @objc public func getAccessControlList() -> [Swift.String]
  @objc public var accessControlList: [Swift.String] {
    @objc get
  }
  @objc public func addUserData(key: Swift.String, value: Swift.String)
  @objc public func updateUserData(key: Swift.String, value: Swift.Set<Swift.String>)
  @objc public func addUserKeyword(_ newElement: Swift.String)
  @objc public func addUserKeywords(_ newElements: Swift.Set<Swift.String>)
  @objc public func removeUserKeyword(_ element: Swift.String)
  @objc public func clearUserKeywords()
  @objc public func getUserKeywords() -> [Swift.String]
  @objc public func addAppExtData(key: Swift.String, value: Swift.String)
  @objc public func updateAppExtData(key: Swift.String, value: Swift.Set<Swift.String>)
  @objc public func removeAppExtData(for key: Swift.String)
  @objc public func clearAppExtData()
  @objc public func getAppExtData() -> [Swift.String : [Swift.String]]
  @objc public func addAppKeyword(_ newElement: Swift.String)
  @objc public func addAppKeywords(_ newElements: Swift.Set<Swift.String>)
  @objc public func removeAppKeyword(_ element: Swift.String)
  @objc public func clearAppKeywords()
  @objc public func getAppKeywords() -> [Swift.String]
  @objc public func getGlobalOrtbConfig() -> Swift.String?
  @objc public func setGlobalOrtbConfig(ortbConfig: Swift.String)
  @objc public func addGlobalTargeting(key: Swift.String, value: Swift.String)
  @objc public func addGlobalTargeting(key: Swift.String, values: Swift.Set<Swift.String>)
  @objc public func removeGlobalTargeting(key: Swift.String)
  @objc public func clearGlobalTargeting()
  @objc override dynamic public init()
  @objc deinit
}
extension PrebidMobile.UserUniqueID {
  @objc public static func from(json: [Swift.String : Any]) -> PrebidMobile.UserUniqueID?
}
extension PrebidMobile.ExternalUserId {
  @objc public static func from(json: [Swift.String : Any]) -> PrebidMobile.ExternalUserId?
}
@objc public enum AUNativeImageAssetType : Swift.Int {
  case icon = 1
  case main = 3
  case custom = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AudienzziOSSDK.AUImageAsset : Swift.Equatable {}
extension AudienzziOSSDK.AUImageAsset : Swift.Hashable {}
extension AudienzziOSSDK.AUImageAsset : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUDataAsset : Swift.Equatable {}
extension AudienzziOSSDK.AUDataAsset : Swift.Hashable {}
extension AudienzziOSSDK.AUDataAsset : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUContextSubType : Swift.Equatable {}
extension AudienzziOSSDK.AUContextSubType : Swift.Hashable {}
extension AudienzziOSSDK.AUContextSubType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUNativeType : Swift.Equatable {}
extension AudienzziOSSDK.AUNativeType : Swift.Hashable {}
extension AudienzziOSSDK.AUNativeType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUApiType : Swift.Equatable {}
extension AudienzziOSSDK.AUApiType : Swift.Hashable {}
extension AudienzziOSSDK.AUApiType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUResultCode : Swift.Equatable {}
extension AudienzziOSSDK.AUResultCode : Swift.Hashable {}
extension AudienzziOSSDK.AUResultCode : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUEventType : Swift.Equatable {}
extension AudienzziOSSDK.AUEventType : Swift.Hashable {}
extension AudienzziOSSDK.AUEventType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUEventTrackingType : Swift.Equatable {}
extension AudienzziOSSDK.AUEventTrackingType : Swift.Hashable {}
extension AudienzziOSSDK.AUEventTrackingType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUVideoProtocolsType : Swift.Equatable {}
extension AudienzziOSSDK.AUVideoProtocolsType : Swift.Hashable {}
extension AudienzziOSSDK.AUVideoProtocolsType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUVideoPlaybackMethodType : Swift.Equatable {}
extension AudienzziOSSDK.AUVideoPlaybackMethodType : Swift.Hashable {}
extension AudienzziOSSDK.AUVideoPlaybackMethodType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUVideoStartDelay : Swift.Equatable {}
extension AudienzziOSSDK.AUVideoStartDelay : Swift.Hashable {}
extension AudienzziOSSDK.AUVideoStartDelay : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUPlacement : Swift.Equatable {}
extension AudienzziOSSDK.AUPlacement : Swift.Hashable {}
extension AudienzziOSSDK.AUPlacement : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUContextType : Swift.Equatable {}
extension AudienzziOSSDK.AUContextType : Swift.Hashable {}
extension AudienzziOSSDK.AUContextType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUPlacementType : Swift.Equatable {}
extension AudienzziOSSDK.AUPlacementType : Swift.Hashable {}
extension AudienzziOSSDK.AUPlacementType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUNativeDataAssetType : Swift.Equatable {}
extension AudienzziOSSDK.AUNativeDataAssetType : Swift.Hashable {}
extension AudienzziOSSDK.AUNativeDataAssetType : Swift.RawRepresentable {}
extension AudienzziOSSDK.AURenderingInsterstitialAdFormat : Swift.Equatable {}
extension AudienzziOSSDK.AURenderingInsterstitialAdFormat : Swift.Hashable {}
extension AudienzziOSSDK.AURenderingInsterstitialAdFormat : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUAdPosition : Swift.Equatable {}
extension AudienzziOSSDK.AUAdPosition : Swift.Hashable {}
extension AudienzziOSSDK.AUAdPosition : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUAdInterstitialPosition : Swift.Equatable {}
extension AudienzziOSSDK.AUAdInterstitialPosition : Swift.Hashable {}
extension AudienzziOSSDK.AUAdInterstitialPosition : Swift.RawRepresentable {}
extension AudienzziOSSDK.AUNativeImageAssetType : Swift.Equatable {}
extension AudienzziOSSDK.AUNativeImageAssetType : Swift.Hashable {}
extension AudienzziOSSDK.AUNativeImageAssetType : Swift.RawRepresentable {}
